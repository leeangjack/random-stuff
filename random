package test;

import java.util.*;




public class test {
    
    private boolean left=true;
    private boolean right=true;
    

    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode(int x) {
            val = x;
            left = null;
            right = null;
        }
    }
    
    
    public static int nestedSum(NestedInteger ni){
        return nestedSumHelper(ni, 1);
        
    }
    
    public static int[] reverseSumHelper(NestedInteger ni){

        int[] ret=new int[2];
        
        if(ni.isInt()){
            ret[0]=ni.i;
            ret[1]=1;
            return ret;
        }
        int t=0;
        int level=0;
        for(NestedInteger nestI:ni.returnList()){
            int[] temp=reverseSumHelper(nestI);
            level=Math.max(level, temp[1]+1);
            t+=temp[0];
        }
        if(ni.i!=null)t+=ni.i*level;
        ret[0]=t;
        ret[1]=level;
        return ret;
        
    
    }
    
    
    public static int nestedSumHelper(NestedInteger ni, int level){
        
        if(ni.isInt())return ni.returnInt()*level;
        int t=0;
        if(ni.i!=null)t+=ni.i*level;
        for(NestedInteger nestI:ni.returnList()){
            t+=nestedSumHelper(nestI, level+1);
        }
        
        return t;
        
    }
  
    public static class NestedInteger{
        private Integer i;
        private List<NestedInteger> list;
        
        public boolean isInt(){
            return ((list==null ||list.size()==0) && i!=null);
        }
        
        public int returnInt(){
            return i;
        }
        
        public NestedInteger(Integer i, List<NestedInteger> list){
           this.i=i;
           this.list=list;
        }
        
        public List<NestedInteger> returnList(){
            return list;
        }
        
        
    }

    public static void main(String[] args) {
      NestedInteger n1=new NestedInteger(1, new ArrayList<NestedInteger>());
      NestedInteger n2=new NestedInteger(2, new ArrayList<NestedInteger>());
      NestedInteger n3=new NestedInteger(3, new ArrayList<NestedInteger>());
      NestedInteger n4=new NestedInteger(4, new ArrayList<NestedInteger>());
      n1.list.add(n2);
      n1.list.add(n3);
      n2.list.add(n4);
      int[] t=reverseSumHelper(n1);
      System.out.println(t[0]);

    }

    
     public int findMin(int[] num) {
        int L=0;
        int R=num.length-1;
        int mid=0;
        while(L+1<R && num[L]>=num[R]){
            mid=L+(R-L)/2;
            if(num[mid]>num[R])L=mid+1;
            else if(num[L]>num[mid])R=mid;
            else {L++;R--;}
        }
        
        return Math.min(num[L], num[R]);
    }
    
    
     public void compactTree(TreeNode root) {
         LinkedList<TreeNode> curLevel=new LinkedList<TreeNode>();
         LinkedList<TreeNode> nextLevel=new LinkedList<TreeNode>();
         List<TreeNode> totalList=new ArrayList<TreeNode>();
         curLevel.add(root);
         while(!curLevel.isEmpty()){
             while(!curLevel.isEmpty()){
                 totalList.add(curLevel.pollFirst());
             }
         }
         
     }
     
     
     public class Interval {
              int start;
              int end;
              Interval() { start = 0; end = 0; }
              Interval(int s, int e) { start = s; end = e; }
         }
    public static boolean isSymmetric(TreeNode root) {
        if (root == null)
            return true;

        return root.left.equals(root.right);
    }

    private static boolean sysmetricTree(TreeNode n1, TreeNode n2) {
        if (n1 == null && n2 == null)
            return true;
        if (n1 == null || n2 == null)
            return false;
        if (n1.val != n2.val)
            return false;

        return sysmetricTree(n1.left, n2.right) && sysmetricTree(n1.right, n2.left);

    }

    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ll = new ArrayList<List<Integer>>();
        
        if (root == null)
            return ll;

        LinkedList<TreeNode> curLevel = new LinkedList<TreeNode>();
        LinkedList<TreeNode> nextLevel = new LinkedList<TreeNode>();

        curLevel.add(root);

        while (!curLevel.isEmpty()) {
            List<Integer> result = new ArrayList<Integer>();

            while (!curLevel.isEmpty()) {

                TreeNode node = curLevel.pollFirst();
                result.add(node.val);
                if (node.left != null)
                    nextLevel.addLast(node.left);
                if (node.right != null)
                    nextLevel.addLast(node.right);

            }

            curLevel = nextLevel;
            nextLevel = new LinkedList<TreeNode>();

            ll.add(result);

        }

        return ll;
    }

    public List<Integer> postOder(TreeNode root) {
        List<Integer> l = new ArrayList<Integer>();
        if (root == null) {
            return l;
        }

        LinkedList<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);

        while (!q.isEmpty()) {
            TreeNode node = q.pollFirst();
            l.add(0, node.val);
            if (node.left != null)
                q.addFirst(node.left);
            if (node.right != null)
                q.addFirst(node.right);

        }

        return l;

    }
    
    

    
    
    
    
    

    public static int minDepth(TreeNode root) {

        if (root == null)
            return 0;

        LinkedList<TreeNode> curLevel = new LinkedList<TreeNode>();
        LinkedList<TreeNode> nextLevel = new LinkedList<TreeNode>();

        curLevel.addLast(root);
        int level = 1;
        while (!curLevel.isEmpty() || !nextLevel.isEmpty()) {
            if (curLevel.isEmpty()) {

                for (int i = 0; i < nextLevel.size(); i++) {
                    System.out.println("NextLevel is " + nextLevel.get(i).val);
                }

                curLevel = nextLevel;
                nextLevel = new LinkedList<TreeNode>();
                System.out.println(curLevel.peek().val);

                for (int i = 0; i < curLevel.size(); i++) {
                    System.out.println("CurLevel is " + curLevel.get(i).val);
                }

                level++;

            }

            TreeNode node = curLevel.pollFirst();
            System.out.println(node.val);

            TreeNode left = node.left;

            TreeNode right = node.right;
            if (left == null && right == null)
                return level;

            if (node.left != null) {
                System.out.println(left.val);

                nextLevel.addLast(root.left);
                System.out.println("head " + nextLevel.peek().val);
                System.out.println("tail " + nextLevel.peekLast().val);
            }
            if (node.right != null) {
                System.out.println(right.val);

                nextLevel.addLast(root.right);
                System.out.println("head " + nextLevel.peek().val);
                System.out.println("tail " + nextLevel.peekLast().val);
            }

        }

        return level;

    }

    public List<TreeNode> helper(int start, int end) {
        List<TreeNode> list = new ArrayList<TreeNode>();

        if (start > end) {
            list.add(null);

            return list;
        }

        for (int i = start; i <= end; i++) {

            List<TreeNode> left = helper(start, i - 1);
            List<TreeNode> right = helper(i + 1, end);

            for (TreeNode leftNode : left) {

                for (TreeNode rightNode : right) {
                    TreeNode temp = new TreeNode(i);
                    temp.left = leftNode;
                    temp.right = rightNode;

                    list.add(temp);
                }

            }

        }

        return list;
    }

    public int treeDepth(TreeNode root) {
        if (root == null)
            return 0;
        int leftDepth = treeDepth(root.left);
        int rightDepth = treeDepth(root.right);

        if (leftDepth == -1 || rightDepth == -1 || Math.abs(leftDepth - rightDepth) > 1)
            return -1;

        return Math.max(leftDepth, rightDepth) + 1;

    }

    public TreeNode sortedArrayToBST(int[] num) {
        return helper(num, 0, num.length - 1);
    }

    public TreeNode helper(int[] num, int start, int end) {

        if (start > end)
            return null;

        int mid = (start + end) / 2;

        TreeNode node = new TreeNode(num[mid]);
        node.left = helper(num, start, mid - 1);
        node.right = helper(num, mid + 1, end);

        return node;

    }

    public List<Integer> inorder(TreeNode root) {
        List<Integer> ret = new ArrayList<Integer>();

        if (root == null)
            return ret;

        LinkedList<TreeNode> stack = new LinkedList<TreeNode>();
        stack.addFirst(root);
        while (root.left != null) {
            root = root.left;
            stack.addFirst(root);
        }
        while (!stack.isEmpty()) {
            TreeNode temp = stack.pollFirst();
            ret.add(temp.val);
            if (temp.right != null) {
                temp = temp.right;
                stack.addFirst(temp);
                while (temp.left != null) {
                    temp = temp.left;
                    stack.addFirst(temp);
                }
            }

        }

        return ret;
    }

    public static List<Integer> preorder(TreeNode root) {
        List<Integer> ret = new ArrayList<Integer>();
        if (root == null)
            return ret;

        LinkedList<TreeNode> list = new LinkedList<TreeNode>();
        list.add(root);

        while (!list.isEmpty()) {
            TreeNode node = list.pollFirst();
            System.out.println(node.val);
            if (node.right != null)
                list.addFirst(root.right);
            ret.add(node.val);
            while (node.left != null) {
                node = node.left;
                if (node.right != null)
                    list.addFirst(root.right);
                System.out.println(node.val);
                ret.add(node.val);
                System.out.println(list.peekFirst().val);
            }

        }

        return ret;
    }

    public static int uniqueTrees(int n) {
        if (n <= 1)
            return 1;

        int[] dp = new int[n + 1];
        dp[0] = dp[1] = 1;

        for (int j = 2; j <= n; j++) {
            int temp = 0;

            for (int i = 1; i <= j; i++) {
                temp += (dp[i - 1] * dp[j - i]);
            }

            dp[j] = temp;
        }

        return dp[n];
    }

    public int maxDepth(TreeNode n) {
        if (n == null)
            return 0;

        return Math.max(maxDepth(n.left), maxDepth(n.right)) + 1;

    }

    public boolean isSameTree(TreeNode n1, TreeNode n2) {
        if (n1 == null && n2 == null)
            return true;
        if (n1 == null || n2 == null || n1.val != n2.val)
            return false;
        return isSameTree(n1.left, n2.left) & isSameTree(n1.right, n2.right);

    }

    public static int maxProfits(int[] prices) {
        if (prices == null || prices.length == 0)
            return 0;
        int forProf = 0;
        int backProf = 0;
        int ret = 0;
        int n = prices.length;
        int[] forward = new int[n];
        int[] backward = new int[n];

        int min = prices[0];
        for (int i = 0; i < n; i++) {
            if (forProf < prices[i] - min) {
                forProf = prices[i] - min;
                forward[i] = forProf;
                min = Math.min(min, prices[i]);
            } else {
                forward[i] = forProf;
                min = Math.min(min, prices[i]);
            }
        }

        int max = prices[n - 1];
        for (int i = n - 1; i > 0; i--) {
            if (backProf < max - prices[i]) {
                backProf = max - prices[i];
                backward[i] = backProf;
                max = Math.max(max, prices[i]);
            } else {
                backward[i] = backProf;
                max = Math.max(max, prices[i]);
            }

        }

        for (int i = 0; i < n - 1; i++) {
            if (ret < forward[i] + backward[i + 1])
                ret = forward[i] + backward[i + 1];
        }

        if (ret < forward[n - 1])
            return forward[n - 1];

        System.out.println(backward[3]);
        System.out.println(forward[2]);

        return ret;

    }

    public int helper(int[] array, int start, int end, int target) {

        if (start > end)
            return -1;

        int mid = (start + end) / 2;
        if (target > array[mid]) {
            return helper(array, mid + 1, end, target);
        }

        if (target < array[mid])
            return helper(array, start, mid - 1, target);

        return mid;

    }

    public int[] searchRange(int[] A, int target) {
        int[] ret = { -1, -1 };
        if (A == null || A.length == 0)
            return ret;

        int found = helper(A, 0, A.length - 1, target);

        int lower = found;
        int upper = found;
        int count = found;
        while (count > 0) {
            count--;
            if (A[count] == target)
                lower = count;
            else
                break;
        }

        count = found;

        while (count < A.length - 1) {
            count++;
            if (A[count] == target)
                upper = count;
            else
                break;
        }

        ret[0] = lower;
        ret[1] = upper;
        return ret;

    }

    public List<String> anagrams(String[] strs) {
        List<String> ret = new ArrayList<String>();

        if (strs == null || strs.length == 0)
            return ret;
        HashMap<String, Integer> map = new HashMap<String, Integer>();
        HashMap<String, String> stringMap = new HashMap<String, String>();
        for (String str : strs) {
            String key = helper(str);
            if (map.containsKey(key)) {
                if (map.get(key) == 1) {
                    ret.add(stringMap.get(key));
                    map.put(key, 2);
                }
                ret.add(str);
            } else {
                stringMap.put(key, str);
                map.put(key, 1);
            }

        }

        return ret;
    }

    public static String helper(String strs) {
        if (strs == null || strs.length() == 0)
            return strs;
        char[] ca = strs.toCharArray();
        Arrays.sort(ca);
        return new String(ca);

    }

    public static boolean canJump(int[] A) {
        if (A == null || A.length == 0)
            return true;
        return jumpHelper(A, 0);

    }

    public static boolean jumpHelper(int[] A, int start) {
        if (start >= A.length - 1)
            return true;

        int steps = A[start];
        if (steps == 0)
            return false;
        for (int i = steps; i > 0; i--) {
            if (start + i >= A.length - 1)
                return true;
            if (A[start + i] + i <= steps)
                continue;

            if (jumpHelper(A, start + i))
                return true;
        }
        return false;

    }

    public static int jump(int[] A) {
        if (A == null || A.length == 0)
            return 0;

        int[] min = new int[A.length];
        Arrays.fill(min, Integer.MAX_VALUE);
        min[0] = 0;

        LinkedList<Integer> list = new LinkedList<Integer>();
        LinkedList<Integer> nextLevel = new LinkedList<Integer>();
        list.add(0);
        int level = 0;

        while (!list.isEmpty()) {
            while (!list.isEmpty()) {
                int current = list.pollFirst();
                min[current] = level;
                if (current >= A.length - 1)
                    return level;
                for (int i = A[current]; i > 0; i--) {
                    if (current + i >= A.length - 1)
                        return level + 1;
                    else {
                        if (min[current + i] == Integer.MAX_VALUE)
                            nextLevel.add(current + i);
                    }

                }

            }
            list = nextLevel;
            nextLevel = new LinkedList<Integer>();
            level++;

        }

        return min[A.length - 1];

    }

    public List<List<Integer>> combinationSum2(int[] num, int target) {
        List<List<Integer>> ll = new ArrayList<List<Integer>>();
        if (num == null || num.length == 0 || target == 0)
            return ll;

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

        for (int i = 0; i < num.length; i++) {
            if (map.containsKey(num[i])) {

                map.put(num[i], map.get(num[i]) + 1);
            } else {
                map.put(num[i], 1);
            }
        }

        return combiHelper(map, target);
    }

    public List<List<Integer>> combiHelper(HashMap<Integer, Integer> map, int target) {
        List<List<Integer>> ll = new ArrayList<List<Integer>>();
        if (map.keySet().size() == 0)
            return ll;
        List<Integer> l = new ArrayList<Integer>();
        if (target == 0) {
            ll.add(l);
            return ll;
        }

        for (Integer t : map.keySet()) {
            if (map.get(t) == 1) {
                HashMap<Integer, Integer> tempMap = new HashMap<Integer, Integer>(map);
                tempMap.remove(t);
                List<List<Integer>> tempLL = combiHelper(tempMap, target - t);
                for (List<Integer> tempL : tempLL) {
                    tempL.add(t);
                }
                ll.addAll(tempLL);
            } else {
                int oldCount = map.get(t);

                HashMap<Integer, Integer> tempMap = new HashMap<Integer, Integer>(map);

                tempMap.put(t, oldCount - 1);
                List<List<Integer>> tempLL = combiHelper(tempMap, target - t);
                for (List<Integer> tempL : tempLL) {
                    tempL.add(t);
                }

                ll.addAll(tempLL);

            }

        }

        return ll;
    }

    public int threeSumClosest(int[] num, int target) {
        Arrays.sort(num);
        int diff = Integer.MAX_VALUE;
        int ret = 0;

        for (int i = 0; i < num.length - 2; i++) {

            int left = i + 1;
            int right = num.length - 1;

            while (left < right) {

                int tempSum = num[i] + num[left] + num[right];
                if (tempSum == target)
                    return target;
                else if (tempSum > target) {
                    if (diff > (tempSum - target)) {
                        diff = tempSum - target;
                        ret = tempSum;
                    }
                    right--;

                    while (right - 1 > i && num[right] == num[right + 1])
                        right--;
                } else if (tempSum < target) {
                    if (diff > target - tempSum) {
                        diff = target - tempSum;
                        ret = tempSum;
                    }
                    left++;
                    while (left + 1 < num.length && num[left - 1] == num[left])
                        left++;
                }

            }

        }

        return ret;

    }

    public int uniquePaths(int m, int n) {
        if (m == 0 || n == 0)
            return 0;

        int[] dp = new int[n];
        Arrays.fill(dp, 1);

        for (int i = 0; i < m - 1; i++) {
            for (int j = 1; j < n; j++) {
                dp[j] = dp[j - 1] + dp[j];
            }
        }

        return dp[n - 1];
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
       if(obstacleGrid==null || obstacleGrid.length==0 || obstacleGrid[0].length==0)return 0;
       int m=obstacleGrid.length;
       int n=obstacleGrid[0].length;
       
       int[] dp=new int[n];
       for(int i=0;i<n;i++){
           if(obstacleGrid[0][i]==1)break;
           dp[i]=1;
       }
       
     
       
       for(int i=1;i<m;i++){
           for(int j=0;j<n;j++){
               if(obstacleGrid[i][j]==1)dp[j]=0;
               else{
                   if(j==0)continue;
                   else dp[j]=dp[j-1]+dp[j];
               }
           }
       }
       
       return dp[n-1];
   }
    
 public static int maxProduct(int[] A) {
        if(A==null || A.length==0)return 0;
        int n=A.length;
        int prod=1;
        List<Integer> list=new ArrayList<Integer>();
        int tempProd=1;
        int maxEntry=A[0];
        for(int i=0;i<n;i++){
            if(A[i]<=0){
                if(tempProd>1)list.add(tempProd);
                tempProd=1;
                list.add(A[i]); }
            else{
                tempProd*=A[i];
            }
            
            prod*=A[i];
            if(maxEntry<A[i])maxEntry=A[i];
        }
        if(prod>0)return prod;
       
        if(tempProd>1)list.add(tempProd);
        
        int l=list.size();
        
    
        
        int ret=maxEntry;
        int[][] dp=new int[l][l];
        for(int i=0;i<l;i++){            
            dp[i][i]=list.get(i);
            if(ret<dp[i][i])ret=dp[i][i];
        }
        
        for(int i=0;i<l;i++){
            for(int j=i+1;j<l;j++){
                dp[i][j]=dp[i][j-1]*list.get(j);
                if(ret<dp[i][j])ret=dp[i][j];
            }
        }
        
        return ret;
    }
 
 
 
 
 

    
    

}
